#include <stdio.h>   //Principal
#include <math.h>    // Funciones trigonometricas
#include <time.h>    // Fecha y hora
#include <unistd.h>  // Necesario para pausar el programa
#include <stdlib.h>  // Necesario para obtener la hora GMT-5 de Ecuador
#include <ctype.h>   // Necesario para la manipulación de caracteres
#include <string.h>   // Necesario para la manipulación de cadenas

#define PI 3.14159265359

// Función para determinar si un año es bisiesto
int es_bisiesto(int ano) {
    if (ano % 4 == 0) {
        if (ano % 100 == 0) {
            if (ano % 400 == 0) {
                return 1;
            }
            return 0;
        }
        return 1;
    }
    return 0;
}

// Función para calcular el número de días transcurridos desde el 1 de enero
int calcular_numero_dias(int mes, int dia, int ano) {
    int dias_por_mes[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int N = dia;
    
    for (int i = 0; i < mes - 1; i++) {
        N += dias_por_mes[i];
    }

    if (mes > 2 && es_bisiesto(ano)) {
        N += 1;
    }

    return N;
}

// Función para calcular el ángulo de declinación solar
double calcular_angulo_declinacion(int N) {
    double Term_1 = -23.44;
    double Term_2 = (360.0 / 365.0) * (N + 10);
    double DS_rad = Term_2 * (PI / 180.0);
    double COSX = cos(DS_rad);
    double Decl = Term_1 * COSX;
    return Decl * (PI / 180.0);  // Convertir a radianes
}

// Función para calcular la ecuación del tiempo
double calcular_ecuacion_tiempo(int N) {
    double B = (360.0 / 365.0) * (N - 81);
    B = B * (PI / 180.0);
    double EoT = 9.87 * sin(2 * B) - 7.53 * cos(B) - 1.5 * sin(B);
    return EoT;
}

// Función para calcular el tiempo solar verdadero
double calcular_TSV(double hr, double min, double Long, double EoT) {
    double hr_local = hr + (min / 60.0);
    double zona_hor = -5;  // Ajusta esta línea según tu zona horaria si es necesario
    double long_stand = zona_hor * 15;
    double TSV = hr_local + (((4 * (Long - long_stand)) + EoT) / 60.0);
    return TSV;
}

// Función para calcular la hora GMT
double calcular_H(double TSV) {
    double H = 15 * (TSV - 12);
    return H * (PI / 180.0);  // Convertir a radianes
}

// Función para calcular el ángulo de elevación solar
double calcular_elevacion(double Decl, double Lat, double H) {
    return asin(sin(Decl) * sin(Lat) + cos(Decl) * cos(Lat) * cos(H));
}

// Función para calcular el azimut principal
double calcular_Azimut(double Decl, double Elev, double Lat, double H) {
    double Azim = acos((sin(Decl) - sin(Elev) * sin(Lat)) / (cos(Elev) * cos(Lat)));
    if (H > 0) {
        Azim = 2 * PI - Azim;
    }
    return Azim;
}

// Función para validar entrada decimal, permitiendo negativos y coma
int validar_decimal(char *entrada) {
    int punto_visto = 0;
    if (*entrada == '-') {
        entrada++;
    }
    while (*entrada) {
        if (!isdigit(*entrada)) {
            if ((*entrada == '.' || *entrada == ',') && !punto_visto) {
                punto_visto = 1;
            } else {
                return 0;
            }
        }
        entrada++;
    }
    return 1;
}

// Función para reemplazar coma con punto
void reemplazar_coma(char *entrada) {
    while (*entrada) {
        if (*entrada == ',') {
            *entrada = '.';
        }
        entrada++;
    }
}

int main() {
    char lat_input[20];
    char long_input[20];
    double Lat, Long;

    // Mensaje de bienvenida
    printf("Bienvenido al programa de cálculo solar.\n");
    printf("*********************************************\n");
    // Entrada de latitud
    while (1) {
        printf("Ingrese la latitud (en grados decimales, puede ser negativa): ");
        scanf("%s", lat_input);
        if (validar_decimal(lat_input)) {
            reemplazar_coma(lat_input);
            Lat = atof(lat_input) * (PI / 180.0);  // Convertir a radianes
            break;
        } else {
            printf("Error: Solo se pueden ingresar números decimales.\n");
        }
    }
     printf("*********************************************\n");

    // Entrada de longitud
    while (1) {
        printf("Ingrese la longitud (en grados decimales, puede ser negativa): ");
        scanf("%s", long_input);
        if (validar_decimal(long_input)) {
            reemplazar_coma(long_input);
            Long = atof(long_input);
            break;
        } else {
            printf("Error: Solo se pueden ingresar números decimales.\n");
        }
    }
    printf("*********************************************\n");
    // Establecer zona horaria manualmente si es necesario (Ecuador: GMT-5)
    setenv("TZ", "America/Guayaquil", 1);
    tzset();

    while (1) {
        // Obtener la fecha y hora actuales
        time_t now = time(NULL);
        struct tm *tm = localtime(&now);
        int dia = tm->tm_mday;
        int mes = tm->tm_mon + 1;
        int ano = tm->tm_year + 1900;
        int hr = tm->tm_hour;
        int min = tm->tm_min;

        // Redondear la hora al intervalo de 5 minutos más cercano
        if (min % 5 >= 2.5) {
            min = (min / 5 + 1) * 5;
        } else {
            min = (min / 5) * 5;
        }
        if (min == 60) {
            min = 0;
            hr += 1;
        }

        // Calcular el número de días transcurridos
        int N = calcular_numero_dias(mes, dia, ano);

        // Calcular el ángulo de declinación solar
        double Decl = calcular_angulo_declinacion(N);

        // Calcular la ecuación del tiempo
        double EoT = calcular_ecuacion_tiempo(N);

        // Calcular el tiempo solar verdadero
        double TSV = calcular_TSV(hr, min, Long, EoT);

        // Calcular la hora GMT
        double H = calcular_H(TSV);

        // Calcular la elevación solar
        double Elev = calcular_elevacion(Decl, Lat, H);

        // Calcular el azimut solar
        double Azimut = calcular_Azimut(Decl, Elev, Lat, H);

        // Convertir resultados a grados para imprimir
        Elev *= (180.0 / PI);
        Azimut *= (180.0 / PI);

        // Imprimir resultados
        printf("Fecha: %d/%d/%d\n", dia, mes, ano);
        printf("Coordenadas: %.7f, %.7f\n", Lat * (180.0 / PI), Long);
        printf("Hora\t\tElevación\tAzimut\n");
        printf("%02d:%02d:00\t%.2f\t\t%.2f\n", hr, min, Elev, Azimut);

        // Esperar 5 minutos
        sleep(300);
    }

    return 0;
}

